// profile for Nimbus cloud at Pawsey
params {
    config_profile_description  = 'Pawsey Nimbus cloud profile'
    config_profile_contact      = '@marcodelapierre & @SarahBeecroft'
    config_profile_url          = 'https://support.pawsey.org.au/documentation/display/US/Nimbus+for+Bioinformatics'
}
process {
  cache = 'lenient'

  // These are default values used for anything not specified with a label.
  cpus = 1
  memory = 1.GB
  
  withLabel: download {
    errorStrategy = "retry"
    maxRetries = 5
  }
  withLabel: small_task {
    cpus =  { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  withLabel: medium_task {
    cpus =  { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
  }
  withLabel: biggish_task {
    cpus =  { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withLabel: big_task {
    cpus =  { check_max( 15 * task.attempt, 'cpus' ) }
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
  }
}
profiles {

  // To use singularity, use nextflow run -profile nimbus,singularity

  singularity {
    singularity {
      enabled     = true
      autoMounts  = true
      runOptions = "--bind $PWD"
    }
  }

  // To use docker, use nextflow run -profile nimbus,docker

  docker {
    docker {
      enabled = true
    }
  }
  c2r8 {
    params {
      max_cpus   = 2
      max_memory = '6.GB'
    }
  }
  c4r16 {
    params {
      max_cpus   = 4
      max_memory = '14.GB'
    }
  }
  c8r32 {
    params {
      max_cpus   = 8
      max_memory = '30.GB'
    }
  }
  c16r64 {
    params {
      max_cpus   = 16
      max_memory = '62.GB'
    }
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
